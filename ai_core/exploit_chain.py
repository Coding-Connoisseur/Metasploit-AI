# ai_core/exploit_chain.py

class ExploitChain:
    def __init__(self, ai):
        self.ai = ai

    def chain_exploits(self, protocol, payloads):
        results = []
        for payload in payloads:
            if payload in self.ai.module_loader.modules:
                if protocol in self.ai.module_loader.modules[payload].protocols:
                    result = self.ai.module_loader.modules[payload].execute(protocol)
                    results.append(result)
                    self.ai.logging_manager.log_info(f"Executed {protocol} payload {payload} in chain with result: {result}")
                else:
                    results.append(f"Payload {payload} does not support {protocol} protocol.")
            else:
                results.append(f"Payload {payload} not found.")
        
        # Perform post-exploitation on successful completion
        if all("Success" in res for res in results):
            post_exploitation_result = self.ai.post_exploitation.perform_post_exploitation(target="example_target")
            results.append(post_exploitation_result)

        return "\n".join(results)