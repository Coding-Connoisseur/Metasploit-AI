# ai_core/exploit_framework.py

import os
import importlib

class ExploitFramework:
    def __init__(self, ai):
        self.ai = ai
        self.exploits = {}
        self.load_exploits()

    def load_exploits(self):
        exploit_dir = "exploits"
        if not os.path.exists(exploit_dir):
            os.makedirs(exploit_dir)
        for file_name in os.listdir(exploit_dir):
            if file_name.endswith(".py"):
                exploit_name = file_name[:-3]
                module_path = f"{exploit_dir}.{exploit_name}"
                module = importlib.import_module(module_path)
                self.exploits[exploit_name] = module
                self.ai.logging_manager.log_info(f"Loaded exploit module: {exploit_name}")

    def configure_exploit(self, exploit_name, config):
        if exploit_name in self.exploits:
            self.ai.logging_manager.log_info(f"Configuring exploit {exploit_name} with {config}")
            self.exploits[exploit_name].configure(config)
        else:
            self.ai.logging_manager.log_error(f"Exploit {exploit_name} not found.")

    def run_exploit(self, exploit_name, target, **kwargs):
        if exploit_name in self.exploits:
            self.ai.logging_manager.log_info(f"Starting exploit {exploit_name} on {target} with params {kwargs}")
            result = self.exploits[exploit_name].execute(target, **kwargs)
            self.ai.logging_manager.log_info(f"Exploit result: {result}")
            return result
        else:
            return f"Exploit '{exploit_name}' not supported."
